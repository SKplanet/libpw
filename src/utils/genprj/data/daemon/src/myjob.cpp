/*
 * Generated by PWGenPrj
 * Generated at __PWTEMPLATE_DATE__
 */

/*!
 * \file myjob.cpp
 * \brief Job logic
 */

#include "./mycommon.h"
#include "./myjob.h"

HttpDemoJob* HttpDemoJob::s_run(pw::ChannelInterface& caller_ch, void* param)
{
	PWSHOWFUNC();

	auto pjob(new HttpDemoJob(caller_ch));
	if ( nullptr == pjob ) return nullptr;

	pw::host_type host("localhost", "80");
	pw::HttpRequestPacket request_pk;
	pw::HttpClientChannel* http_ch(nullptr);

	do {
		if ( nullptr == (http_ch = pw::HttpClientChannel::s_query(host, request_pk, POLLER, nullptr, pjob)) ) break;
		pjob->m_res_ch = http_ch->getUniqueName();

		return pjob;
	} while (false);

	if ( pjob ) delete pjob;
	return nullptr;
}

HttpDemoJob::HttpDemoJob(pw::ChannelInterface& caller_ch) : pw::Job(JOBMAN), m_req_ch(caller_ch.getUniqueName())
{
	PWSHOWMETHOD();
}

void HttpDemoJob::eventReadPacket(pw::ChannelInterface* response_ch, const pw::PacketInterface& response_pk, void* param, bool& del_this)
{
	PWSHOWMETHOD();
	auto& http_res_pk(dynamic_cast<const pw::HttpResponsePacket&>(response_pk));

	auto sch(pw::ChannelInterface::s_getChannel(m_req_ch));
	if ( sch )
	{
		pw::MsgPacket msg_res_pk;
		msg_res_pk.m_code = "TEST";
		msg_res_pk.m_trid = 0;
		std::stringstream ss;
		http_res_pk.write(ss);
		msg_res_pk.m_body = ss.str();
		sch->write(msg_res_pk);
	}

	del_this = true;
}

void HttpDemoJob::eventTimeout(int64_t diff, bool& del_this)
{
	PWSHOWMETHOD();
	auto sch(pw::ChannelInterface::s_getChannel(m_req_ch));
	if ( sch )
	{
		pw::MsgPacket msg_res_pk;
		msg_res_pk.m_code = "TEST";
		msg_res_pk.m_trid = 0;
		PWStr::format(msg_res_pk.m_appendix, "%d", PWRES_CODE_GATEWAY_TIMEOUT);
		sch->write(msg_res_pk);
	}

	del_this = true;
}

void HttpDemoJob::eventError(pw::ChannelInterface* response_ch, pw::ChannelInterface::Error error_type, int error, bool& del_this)
{
	PWSHOWMETHOD();
	auto sch(pw::ChannelInterface::s_getChannel(m_req_ch));
	if ( sch )
	{
		pw::MsgPacket msg_res_pk;
		msg_res_pk.m_code = "TEST";
		msg_res_pk.m_trid = 0;
		PWStr::format(msg_res_pk.m_appendix, "%d %d %s", PWRES_CODE_INTERNAL_SERVER_ERROR, error, pw::ChannelInterface::s_toString(error_type));
		sch->write(msg_res_pk);
	}

	del_this = true;
}
